{"id":"JNbc","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/max.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/operators/max.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"./reduce","loc":{"line":2,"column":23},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/max.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/reduce.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.max=r;var e=require(\"./reduce\");function r(r){var t=\"function\"==typeof r?function(e,t){return r(e,t)>0?e:t}:function(e,r){return e>r?e:r};return(0,e.reduce)(t)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":80}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":1,"column":82}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":1,"column":86}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":1,"column":88}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":1,"column":96}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":50,"column":2},"generated":{"line":1,"column":108}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":50,"column":34},"generated":{"line":1,"column":117}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":50,"column":34},"generated":{"line":1,"column":119}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":51,"column":4},"generated":{"line":1,"column":122}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":51,"column":4},"generated":{"line":1,"column":126}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":51,"column":16},"generated":{"line":1,"column":128}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":51,"column":8},"generated":{"line":1,"column":147}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":6},"generated":{"line":1,"column":149}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":7},"generated":{"line":1,"column":158}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":10},"generated":{"line":1,"column":160}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":16},"generated":{"line":1,"column":163}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":16},"generated":{"line":1,"column":170}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":25},"generated":{"line":1,"column":172}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":28},"generated":{"line":1,"column":174}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":30},"generated":{"line":1,"column":177}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":30},"generated":{"line":1,"column":179}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":52,"column":30},"generated":{"line":1,"column":181}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":2},"generated":{"line":1,"column":184}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":16},"generated":{"line":1,"column":193}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":1,"column":195}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":1,"column":198}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":1,"column":205}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":1,"column":207}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":1,"column":209}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":54,"column":21},"generated":{"line":1,"column":211}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":214}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":221}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":223}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":225}},{"source":"../../../src/internal/operators/max.ts","name":null,"original":{"line":55,"column":1},"generated":{"line":1,"column":233}}],"sources":{"../../../src/internal/operators/max.ts":"import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * ![](max.png)\n *\n * ## Examples\n * Get the maximal value of a series of numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { max } from 'rxjs/operators';\n *\n * of(5, 4, 7, 2, 8).pipe(\n *   max(),\n * )\n * .subscribe(x => console.log(x)); // -> 8\n * ```\n *\n * Use a comparer function to get the maximal item\n * ```typescript\n * import { of } from 'rxjs';\n * import { max } from 'rxjs/operators';\n *\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * of<Person>(\n *   {age: 7, name: 'Foo'},\n *   {age: 5, name: 'Bar'},\n *   {age: 9, name: 'Beer'},\n * ).pipe(\n *   max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1),\n * )\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * ```\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n"},"lineCount":null}},"error":null,"hash":"65d32484fc8afb1302f03b3040844fe8","cacheData":{"env":{}}}