{"id":"WwVx","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/combineAll.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/operators/combineAll.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"../observable/combineLatest","loc":{"line":2,"column":38},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/combineAll.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/observable/combineLatest.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.combineAll=t;var e=require(\"../observable/combineLatest\");function t(t){return function(r){return r.lift(new e.CombineLatestOperator(t))}}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":87}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":2},"generated":{"line":1,"column":134}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":9},"generated":{"line":1,"column":143}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":56,"column":31},"generated":{"line":1,"column":145}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":148}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":155}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":164}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":167}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":174}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":176}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":181}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":185}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":187}},{"source":"../../../src/internal/operators/combineAll.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":1,"column":209}}],"sources":{"../../../src/internal/operators/combineAll.ts":"import { CombineLatestOperator } from '../observable/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function combineAll<T>(): OperatorFunction<any, T[]>;\nexport function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n/**\n * Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\n *\n * ![](combineAll.png)\n *\n * `combineAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\n * it subscribes to all collected Observables and combines their values using the {@link combineLatest}</a> strategy, such that:\n *\n * * Every time an inner Observable emits, the output Observable emits\n * * When the returned observable emits, it emits all of the latest values by:\n *    * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\n *      arrived, and the result of the `project` function is what is emitted by the output Observable.\n *    * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\n *\n * ---\n *\n * ## Examples\n *\n * ### Map two click events to a finite interval Observable, then apply `combineAll`\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, combineAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev =>\n *      interval(Math.random() * 2000).pipe(take(3))\n *   ),\n *   take(2)\n * );\n * const result = higherOrder.pipe(\n *   combineAll()\n * );\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function(...values: Array<any>)} An optional function to map the most recent values from each inner Observable into a new result.\n * Takes each of the most recent values from each collected inner Observable as arguments, in order.\n * @return {Observable<T>}\n * @name combineAll\n */\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n"},"lineCount":null}},"error":null,"hash":"fdb66b9c150900a69c5c8cc12bf8f6c7","cacheData":{"env":{}}}