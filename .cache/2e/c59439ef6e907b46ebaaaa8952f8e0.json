{"id":"v3zB","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeAll.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/operators/mergeAll.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeAll.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"},{"name":"../util/identity","loc":{"line":3,"column":25},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeAll.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/util/identity.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.mergeAll=t;var e=require(\"./mergeMap\"),r=require(\"../util/identity\");function t(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),(0,e.mergeMap)(r.identity,t)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":85}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":101}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":1,"column":115}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":1,"column":117}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":1,"column":125}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":1,"column":145}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":1,"column":154}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":28},"generated":{"line":1,"column":156}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":159}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":18},"generated":{"line":1,"column":171}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":1,"column":175}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":179}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":181}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":188}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":208}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":210}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":212}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":222}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":224}},{"source":"../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":1,"column":233}}],"sources":{"../../../src/internal/operators/mergeAll.ts":"\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { take, map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<ObservableInput<T>, T> {\n  return mergeMap(identity, concurrent);\n}\n"},"lineCount":null}},"error":null,"hash":"16a748a3e32d0a0a9e89dc985b949359","cacheData":{"env":{}}}