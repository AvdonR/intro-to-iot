{"id":"NDRg","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/concatAll.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/operators/concatAll.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"./mergeAll","loc":{"line":2,"column":25},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/concatAll.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeAll.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.concatAll=r;var e=require(\"./mergeAll\");function r(){return(0,e.mergeAll)(1)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":86}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":1,"column":88}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":1,"column":94}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":67,"column":2},"generated":{"line":1,"column":116}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":125}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":129}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":136}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":138}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":140}},{"source":"../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":68,"column":1},"generated":{"line":1,"column":150}}],"sources":{"../../../src/internal/operators/concatAll.ts":"\nimport { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function concatAll<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.png)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, take, concatAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return mergeAll<T>(1);\n}\n"},"lineCount":null}},"error":null,"hash":"abf467371ab7983a6d7c5045b0888f8f","cacheData":{"env":{}}}