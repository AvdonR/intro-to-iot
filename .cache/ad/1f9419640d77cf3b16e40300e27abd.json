{"id":"vVyR","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/operators/mergeMapTo.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"./mergeMap","loc":{"line":2,"column":25},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.mergeMapTo=r;var e=require(\"./mergeMap\");function r(r,t,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),\"function\"==typeof t?(0,e.mergeMap)(function(){return r},t,n):(\"number\"==typeof t&&(n=t),(0,e.mergeMap)(function(){return r},n))}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":87}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":52,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":1,"column":117}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":1,"column":126}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":1,"column":128}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":2},"generated":{"line":1,"column":130}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":55,"column":30},"generated":{"line":1,"column":132}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":1,"column":135}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":13},"generated":{"line":1,"column":147}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":57,"column":6},"generated":{"line":1,"column":151}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":4},"generated":{"line":1,"column":155}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":11},"generated":{"line":1,"column":157}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":58,"column":20},"generated":{"line":1,"column":164}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":32},"generated":{"line":1,"column":183}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":60,"column":13},"generated":{"line":1,"column":202}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":1,"column":205}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":1,"column":207}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":1,"column":209}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":1,"column":219}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":1,"column":230}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":1,"column":237}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":1,"column":240}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":61,"column":32},"generated":{"line":1,"column":242}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":24},"generated":{"line":1,"column":246}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":1,"column":263}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":267}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":269}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":273}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":275}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":277}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":287}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":298}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":305}},{"source":"../../../src/internal/operators/mergeMapTo.ts","name":null,"original":{"line":64,"column":1},"generated":{"line":1,"column":308}}],"sources":{"../../../src/internal/operators/mergeMapTo.ts":"import { Observable } from '../Observable';\nimport { OperatorFunction, ObservedValueOf } from '../../internal/types';\nimport { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, O extends ObservableInput<any>>(innerObservable: O, concurrent?: number): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated */\nexport function mergeMapTo<T, R, O extends ObservableInput<any>>(innerObservable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * ![](mergeMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * ## Example\n * For each click event, start an interval Observable ticking every 1 second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { mergeMapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(mergeMapTo(interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable`\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, R, O extends ObservableInput<any>>(\n  innerObservable: O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return mergeMap(() => innerObservable, concurrent);\n}\n"},"lineCount":null}},"error":null,"hash":"1a6d64b44945d60a2e6eec2d87747451","cacheData":{"env":{}}}