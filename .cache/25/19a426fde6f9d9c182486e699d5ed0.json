{"id":"a0zU","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/observable/throwError.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/observable/throwError.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"../Observable","loc":{"line":2,"column":27},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/observable/throwError.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/Observable.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.throwError=e;var r=require(\"../Observable\");function e(e,o){return o?new r.Observable(function(r){return o.schedule(n,0,{error:e,subscriber:r})}):new r.Observable(function(r){return r.error(e)})}function n(r){var e=r.error;r.subscriber.error(e)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":87}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":70,"column":2},"generated":{"line":1,"column":120}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":70,"column":7},"generated":{"line":1,"column":129}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":70,"column":18},"generated":{"line":1,"column":131}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":70,"column":18},"generated":{"line":1,"column":133}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":1,"column":136}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":71,"column":4},"generated":{"line":1,"column":143}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":145}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":149}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":151}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":162}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":171}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":174}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":181}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":183}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":192}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":194}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":196}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":197}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":203}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":205}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":1,"column":216}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":222}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":226}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":228}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":239}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":248}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":251}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":258}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":260}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":1,"column":266}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":82,"column":20},"generated":{"line":1,"column":271}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":82,"column":20},"generated":{"line":1,"column":280}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":82,"column":20},"generated":{"line":1,"column":282}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":1,"column":285}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":1,"column":289}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":83,"column":13},"generated":{"line":1,"column":291}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":83,"column":13},"generated":{"line":1,"column":293}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":83,"column":26},"generated":{"line":1,"column":299}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":83,"column":26},"generated":{"line":1,"column":301}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":312}},{"source":"../../../src/internal/observable/throwError.ts","name":null,"original":{"line":84,"column":1},"generated":{"line":1,"column":318}}],"sources":{"../../../src/internal/observable/throwError.ts":"import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```ts\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 2\n * ```ts\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n"},"lineCount":null}},"error":null,"hash":"f768380ccdf91ca34b11b73a26ba21db","cacheData":{"env":{}}}