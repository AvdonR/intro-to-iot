{"id":"GoEE","dependencies":[{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/concatMapTo.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/src/internal/operators/concatMapTo.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/package.json","includedInParent":true,"mtime":1607036704212},{"name":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"./concatMap","loc":{"line":2,"column":26},"parent":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/concatMapTo.js","resolved":"/Users/avdonr/Documents/GitHub/intro-to-iot/node_modules/rxjs/_esm5/internal/operators/concatMap.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.concatMapTo=t;var e=require(\"./concatMap\");function t(t,r){return(0,e.concatMap)(function(){return t},r)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":88}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":1,"column":90}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":1,"column":94}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":1,"column":96}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":1,"column":104}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":72,"column":2},"generated":{"line":1,"column":119}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":72,"column":9},"generated":{"line":1,"column":128}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":72,"column":19},"generated":{"line":1,"column":130}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":72,"column":25},"generated":{"line":1,"column":132}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":135}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":142}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":144}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":146}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":157}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":168}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":175}},{"source":"../../../src/internal/operators/concatMapTo.ts","name":null,"original":{"line":73,"column":1},"generated":{"line":1,"column":178}}],"sources":{"../../../src/internal/operators/concatMapTo.ts":"import { concatMap } from './concatMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, O extends ObservableInput<any>>(observable: O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated */\nexport function concatMapTo<T, O extends ObservableInput<any>>(observable: O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated */\nexport function concatMapTo<T, R, O extends ObservableInput<any>>(observable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * ![](concatMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMapTo, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMapTo(interval(1000).pipe(take(4))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, R, O extends ObservableInput<any>>(\n  innerObservable: O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n"},"lineCount":null}},"error":null,"hash":"6ac40985a6a0caf7662f4c9fbaedfaf9","cacheData":{"env":{}}}